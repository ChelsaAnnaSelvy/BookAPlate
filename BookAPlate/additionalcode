Gallery
function previewFile() {
  var preview = document.querySelector('img');
  var file    = document.querySelector('input[type=file]').files[0];
  var reader  = new FileReader();

  reader.onloadend = function () {
    preview.src = reader.result;
  }

  if (file) {
    reader.readAsDataURL(file);
  } else {
    preview.src = "";
  }
}
<input type="file" onchange="previewFile()"><br>
<img src="" height="200" alt="Image preview...">


-----------------------------------------------------------
<form>
  <label for="file-upload" class="custom-file-upload">
    <i class="fa fa-cloud-upload"></i> Upload Image
  </label>
  <input id="file-upload" name='upload_cont_img' type="file" style="display:none;">
</form> 
------------------------------------------------------------------------------------

  <div class="col-12">
          <label for="description" class="form-label">Description</label>
          <div id="description">
          <span class="ql-formats">
            <select class="ql-font"></select>
            <select class="ql-size"></select>
          </span>
          <span class="ql-formats">
            <button class="ql-bold"></button>
            <button class="ql-italic"></button>
            <button class="ql-underline"></button>
            <button class="ql-strike"></button>
          </span>
          <span class="ql-formats">
            <select class="ql-color"></select>
            <select class="ql-background"></select>
          </span>
          <span class="ql-formats">
            <button class="ql-script" value="sub"></button>
            <button class="ql-script" value="super"></button>
          </span>
          <span class="ql-formats">
            <button class="ql-header" value="1"></button>
            <button class="ql-header" value="2"></button>
            <button class="ql-blockquote"></button>
            <button class="ql-code-block"></button>
          </span>
        </div>
         
        
        <div id="snow-editor">
          </div>
      
    
  </div>
   <input type="hidden" name="editor_content" id="editor_content">
  <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Initialize Quill with your options
            const snowEditor = new Quill('#snow-editor', {
                bounds: '#snow-editor',
                modules: {
                    formula: true,
                    toolbar: '#description'
                },
                theme: 'snow'
            });

            // Update the hidden input field with the Quill content
        snowEditor.on('text-change', function () {
        const editorContent = snowEditor.root.innerHTML;
        document.getElementById('editor_content').value = editorContent;
    });
        });
    </script>


.........................................................................
<!-- Add this script at the end of your HTML body or in a separate script file -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Get all labels with the class 'btn'
        var labels = document.querySelectorAll('.btn');

        // Add a click event listener to each label
        labels.forEach(function(label) {
            label.addEventListener('click', function() {
                // Toggle the color between green and red
                if (label.classList.contains('btn-success')) {
                    label.classList.remove('btn-success');
                    label.classList.add('btn-outline-danger');
                } 
                else if (label.classList.contains('btn-outline-danger')) {
                    label.classList.remove('btn-outline-danger');
                    label.classList.add('btn-success');
                }
            });
        });

        // Get the form element
        var bookingForm = document.getElementById('booking-form');

        // Add a submit event listener to the form
        bookingForm.addEventListener('submit', function(event) {
            // Prevent the default form submission
            event.preventDefault();

            // Collect the selected values
            var selectedFacilities = [];
            labels.forEach(function(label) {
                if (label.classList.contains('btn-outline-danger')) {
                    // Extract the facility number and seat count from the label text
                    var facilityNumber = label.textContent.split('\n')[0];
                    var seatCount = label.textContent.split('[')[1].split(']')[0];
                    
                    // Push the selected values to the array
                    selectedFacilities.push({
                        facilityNumber: facilityNumber,
                        seatCount: seatCount
                    });
                }
            });

            // Add the selected values to a hidden input field in the form
            var selectedFacilitiesInput = document.createElement('input');
            selectedFacilitiesInput.type = 'hidden';
            selectedFacilitiesInput.name = 'selected_facilities';
            selectedFacilitiesInput.value = JSON.stringify(selectedFacilities);
            bookingForm.appendChild(selectedFacilitiesInput);

            // Submit the form
            bookingForm.submit();
        });
    });
</script>
<!-- Add this form below your existing code -->
<form id="booking-form" method="post" action="{% url 'book_table' %}">
{% csrf_token %}
<div class="row row-cols-4 row-cols-sm-4 row-cols-md-4 row-cols-lg-6 g-3 pt-3">
    {% for facility in facilities %}
        <div class="cols">
           {% if facility in available %}
                <label class="btn btn-success">{{ facility.facility_number }}<br/>[{{ facility.seat_count }}]</label>
                <input type="hidden" value="{{ facility.facility_id}}"/>
            {% else %}
                <label class="btn btn-danger">{{ facility.facility_number }}<br/>[{{ facility.seat_count }}]</label>

              {% endif %}
        </div>
    {% endfor %}
</div>

<div class="row g-3 pt-3">
  <!-- Add a button to submit the form -->
  <div class="col-sm-2 col-md-2 col-lg-2"></div>
  <div class="col-sm-6 col-md-6 col-lg-6">
    <button type="submit" class="btn btn-outline-primary w-100 py-3">BOOK NOW</button>
</div>
    </div>
    
</form>
...............................................................................................
def BookTableView(request):
    if request.method == 'POST':
        # Retrieve the selected facilities JSON string from the form data
        selected_facilities_json = request.POST.get('selected_facilities')

        if selected_facilities_json:
            # Parse the JSON string to get a list of selected facilities
            selected_facilities = json.loads(selected_facilities_json)

            # Now 'selected_facilities' contains a list of dictionaries with 'facilityNumber' and 'seatCount' keys
            # You can process this data as needed in your views.py

            # For example, print the selected facilities
            for facility in selected_facilities:
                facility_number = facility.get('facilityNumber')
                seat_count = facility.get('seatCount')
                print(f'Selected Facility: {facility_number}, Seat Count: {seat_count}')

           # Perform your further processing here

    # Your existing code for rendering the template or any other logic
    return redirect('restaurants')

......................................................................................
def ConfirmBookTableView(request):
    logged_user=request.user
    customer = get_object_or_404(Customer,user=logged_user) 
    coins = get_object_or_404(Coins,user=customer) 
    request.session['facility_details_data'] = []
    request.session['coin_count'] = 0
    request.session['date'] = ''
    request.session['meal_time'] = ''
    
    if request.method == 'POST':
        # Retrieve the selected facilities from the form data
        selected_facilities_json = request.POST.get('selected_facilities', '[]')
        selected_facilities = json.loads(selected_facilities_json)

        # Retrieve the selected facility IDs from the form data
        selected_facility_ids_json = request.POST.get('selected_facility_ids', '[]')
        selected_facility_ids = json.loads(selected_facility_ids_json)

        # Create lists to store the data
        facility_ids_list = []
        seat_counts_list = []

        # Process the selected facilities and IDs
        for facility, facility_id in zip(selected_facilities, selected_facility_ids):
            seat_count = facility['seatCount']

            # Append data to the lists
            facility_ids_list.append(facility_id)
            seat_counts_list.append(seat_count)
            # Convert the strings to integers
            head_count = [int(num) for num in seat_counts_list]

            # Find the total of the values in the list
            total = sum(head_count)
            if coins.coin_quantity > total:
        
                # Create a dictionary to pass as context to the template
                # Query the FacilityDetails model to get objects with matching IDs
                facility_details_list = FacilityDetails.objects.filter(facility_id__in=facility_ids_list)

                # Convert the queryset to a list of dictionaries
                facility_details_data = list(facility_details_list.values())
                meal= request.POST.get('meal', '')
                date = request.POST['date']
                print(facility_details_data)
                
                # Store data in the session
                request.session['facility_details_data'] = facility_details_data
                request.session['coin_count'] = total * 10                
                request.session['date'] = date
                request.session['meal_time'] = meal

                context = {
            'facilities': facility_details_data,            
            'head_count': total,  
            'coin_count':total*10,          
            'logged_user':logged_user,
            'customer': customer,
            'coins': coins,
        }
        
                return render(request, 'customer/booking_confirmation.html',context)
            else:
                messages.success(request, 'Sorry You have insufficient coins. Kindly contact the customer care to buy our coin pack')
                return redirect('confirm_booking_table')
            
        context = {
            'facilities': facility_details_data,            
            'head_count': total,  
            'coin_count':total*10,          
            'logged_user':logged_user,
            'customer': customer,
            'coins': coins,
        }
        
    return render(request, 'customer/booking_confirmation.html',context)
    .............................................................................................
def HomeView(request):
    logged_user= request.user
    customer = get_object_or_404(Customer,user=logged_user) 
    coins = get_object_or_404(Coins,user=customer) 
    context={
        'logged_user':logged_user,
        'customer': customer,
        'coins': coins,
    }
    return render(request,'customer/home.html',context)

def CustomerProfileView(request):
    logged_user=request.user
    customer = get_object_or_404(Customer,user=logged_user) 
    coins = get_object_or_404(Coins,user=customer) 
    
    if request.method=='POST':
        userform = UserForm(request.POST,instance=logged_user)       
        customerdetailsform = EditCustomerForm(request.POST, request.FILES,instance=customer)
        
        if userform.is_valid() and customerdetailsform.is_valid():
           
            user = userform.save()  # Save the user first
            customer = customerdetailsform.save()            
            messages.success(request, 'You have successfully updated your profile')
            return redirect('customer_profile')
    else:
      
        userform = UserForm(instance=logged_user)
        customerdetailsform = EditCustomerForm(instance=customer)  
       
        context={
        'logged_user':logged_user,
        'customer': customer,
        'form1': userform,
        'form2':customerdetailsform,
        'coins': coins,
    }
        return render(request,'customer/profile.html',context)
    return redirect('customer_profile')

def RestaurantListView(request):
   logged_user=request.user
   customer = get_object_or_404(Customer,user=logged_user)  
   coins = get_object_or_404(Coins,user=customer)   
   restaurants= Restaurant.objects.filter(status='Active')
   context={
       'logged_user': logged_user,
       'customer': customer,
       'restaurants': restaurants,
       'coins': coins,
   }
  
   return render(request,'customer/restaurants.html',context) 

def RestaurantProfileView(request):
   logged_user=request.user
   customer = get_object_or_404(Customer,user=logged_user) 
   coins = get_object_or_404(Coins,user=customer) 
   if request.method=='POST':
        restaurant_id= request.POST.get('restaurant_id',0)
        restaurant= get_object_or_404(Restaurant,restaurant_id=restaurant_id)
        restaurant_user = restaurant.user
        galleries = Gallery.objects.filter(restaurant=restaurant) 
        context={
       'logged_user': logged_user,
       'customer': customer,
       'restaurant': restaurant,
       'restaurant_galleries': galleries.filter(category='Gallery'),
       'menu_galleries': galleries.filter(category='Menu'),
       'restaurant_user':restaurant_user,
       'coins': coins,
        }
        return render(request,'customer/restaurant_profile.html',context) 
   
def TableView(request):
    logged_user=request.user
    customer = get_object_or_404(Customer,user=logged_user) 
    coins = get_object_or_404(Coins,user=customer) 
    if request.method=='POST':
        
        restaurant_id=request.POST.get('restaurant_id',0)       
        
        restaurant=get_object_or_404(Restaurant,restaurant_id=restaurant_id)
        facilities=FacilityDetails.objects.filter(restaurant=restaurant,facility_name='Table')
        date = request.POST.get('due_date',None)
        meal_time=request.POST.get('meal_time','')
        
        # Get booked facility IDs
        exclude_facility_ids = BookingDetails.objects.filter(date=date, meal_time=meal_time).values_list('facility__facility_id', flat=True)   

        # Get available facilities
        available_facilities = FacilityDetails.objects.exclude(facility_id__in=exclude_facility_ids)
        
        context={
        'facilities':facilities,
        'meal_time':BookingDetails.MEAL_CHOICES,
        'logged_user':logged_user,
        'customer':customer,    
        'available':available_facilities,
        'restaurant':restaurant,
        'date':date,
        'meal':meal_time,
        'coins':coins,
        
    }        
        return render(request,'customer/view_table.html',context)
    
    context={
        'meal_time':BookingDetails.MEAL_CHOICES,
        'logged_user':logged_user,
        'customer':customer,
        'coins': coins,
    }
    
    return render(request,'customer/view_table.html',context)

def ConfirmBookTableView(request):
    logged_user = request.user
    customer = get_object_or_404(Customer, user=logged_user)
    coins = get_object_or_404(Coins, user=customer)

    # Initialize session variables
    request.session['facility_details_data'] = []
    request.session['coin_count'] = 0
    request.session['date'] = ''
    request.session['meal_time'] = ''

    if request.method == 'POST':
        selected_facilities_json = request.POST.get('selected_facilities', '[]')
        selected_facility_ids_json = request.POST.get('selected_facility_ids', '[]')

        selected_facilities = json.loads(selected_facilities_json)
        selected_facility_ids = json.loads(selected_facility_ids_json)

        facility_ids_list = []
        seat_counts_list = []

        for facility, facility_id in zip(selected_facilities, selected_facility_ids):
            seat_count = facility['seatCount']
            facility_ids_list.append(facility_id)
            seat_counts_list.append(seat_count)

        head_count = [int(num) for num in seat_counts_list]
        total = sum(head_count)      
        facility_details_list = FacilityDetails.objects.filter(facility_id__in=facility_ids_list)
        facility_details_data = list(facility_details_list.values())
        meal = request.POST.get('meal', '')
        date = request.POST['date']
        if coins.coin_quantity > total* 10:
            # Store data in the session
            request.session['facility_details_data'] = facility_details_data
            request.session['coin_count'] = total * 10
            request.session['date'] = date
            request.session['meal_time'] = meal

        context = {
                'facilities': facility_details_data,
                'head_count': total,
                'coin_count': total * 10,
                'logged_user': logged_user,
                'customer': customer,
                'coins': coins,
                'meal':meal,
                'date':date,
            }

        return render(request, 'customer/booking_confirmation.html', context)
        
    # Default context if not a POST request
    context = {
        'facilities': [],
        'head_count': 0,
        'coin_count': 0,
        'logged_user': logged_user,
        'customer': customer,
        'coins': coins,
        'meal':meal,
        'date':date,
    }

    return render(request, 'customer/booking_confirmation.html', context)

# BookTableView
def BookTableView(request):
    execution_count = 0
    logged_user = request.user
    customer = get_object_or_404(Customer, user=logged_user)
    coins = get_object_or_404(Coins, user=customer)

    # Check if data processing is needed
    if not request.session.get('booking_processed', False):
        # Retrieve data from the session
        facility_details_data = request.session.get('facility_details_data', [])
        coin_count = request.session.get('coin_count', 0)
        meal_time = request.session.get('meal_time', 0)
        date = request.session.get('date')
        remaining_coins = coins.coin_quantity

        if remaining_coins >= coin_count and meal_time:
            execution_count += 1
            coins.coin_quantity -= coin_count
            coins.save()

            # Create a BookingDetails object and set its fields
            booking = BookingDetails.objects.create(
                date=date,
                status='Booked',
                meal_time=meal_time,
                customer=customer,
            )

            # Get or create Facility instances and add them to the booking
            facilities = []
            for facility_data in facility_details_data:
                facility, created = FacilityDetails.objects.get_or_create(**facility_data)
                facilities.append(facility)

            # Use the set() method to add related objects for the many-to-many field
            booking.facility.set(facilities)

            # Save the booking after setting the facilities
            booking.save()

            # Clear session variables after successful processing
            if 'facility_details_data' in request.session:
                del request.session['facility_details_data']
            if 'coin_count' in request.session:
                del request.session['coin_count']
            if 'date' in request.session:
                del request.session['date']
            if 'meal_time' in request.session:
                del request.session['meal_time']

            # Set the processing flag
            request.session['booking_processed'] = True

            messages.success(request, 'You have successfully booked tables. Happy Dining!!!')
            return redirect('my_reservations')
        else:
            # Clear session variables even if processing is not successful
            if 'facility_details_data' in request.session:
                del request.session['facility_details_data']
            if 'coin_count' in request.session:
                del request.session['coin_count']
            if 'date' in request.session:
                del request.session['date']
            if 'meal_time' in request.session:
                del request.session['meal_time']

            # Set the processing flag
            request.session['booking_processed'] = True

            messages.error(request, 'Sorry, you have insufficient coins. Kindly contact customer care to buy our coin pack')
            return redirect('restaurants')
    my_booking = BookingDetails.objects.filter(customer = customer)
    context={
        'logged_user': logged_user,
        'customer': customer,
        'coins': coins,
        'bookings':my_booking,
    }
    return render(request,'customer/booking_history.html',context)

   
def BookingHistoryView(request):


    logged_user=request.user
    customer = get_object_or_404(Customer,user=logged_user) 
    coins = get_object_or_404(Coins,user=customer)  
    my_booking = BookingDetails.objects.filter(customer = customer)
    context={
        'bookings':my_booking,
        'logged_user': logged_user,
        'customer': customer,
        'coins': coins,
    }
    return render(request,'customer/booking_history.html',context)
    .....................................................................................................
